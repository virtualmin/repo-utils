#!/bin/bash

builddir=$HOME/build/webmin/

# vgt $oldver $newver - version greater than test
function vgt() {
  parts=(${1//./ })
  major=${parts[0]}
  minor=${parts[1]}
  newparts=(${2//./ })
  newmajor=${newparts[0]}
  newminor=${newparts[1]}
  if (( $major < $newmajor )); then
    return 0
  elif (( $major == $newmajor )) && (( $minor < $newminor )); then
    return 0
  else
    return 1
  fi
}

# Modules to build
modules='virtualmin-mailman
virtualmin-awstats
virtualmin-registrar
virtualmin-git
virtualmin-dav
virtualmin-sqlite
virtualmin-slavedns
virtualmin-powerdns
virtualmin-password-recovery
virtualmin-htpasswd
virtualmin-google-analytics
virtualmin-disable
virtualmin-nginx
virtualmin-nginx-ssl
virtualmin-notes
virtualmin-vsftpd
virtualmin-signup
virtualmin-oracle
virtualmin-multi-login
virtualmin-mailrelay
virtualmin-init
virtualmin-iframe
virtualmin-messageoftheday
virtualmin-support
webmin-jailkit
ruby-gems'

for m in $modules; do
  if [ ! -d tmp ]; then
    mkdir tmp
  fi
  cd $builddir
  if [ ! -d $m ]; then
    git clone "git@github.com:virtualmin/$m.git"
    cd $m
  else
    cd $m
    git pull
  fi
  tag_ver=$(git describe --tags --abbrev=0)
  if [[ $tag_ver != v* ]]; then
    # No tagged version, skipping
    echo "$m: no tags."
    continue
  fi
  ver=$(echo $tag_ver |sed 's/v//')
  old_ver=$(cat "$HOME/build/lastvers/$m")
  if [ -f "$HOME/build/epochs/$m" ]; then
    epoch="--epoch $(cat $HOME/build/epochs/$m)"
  else
    epoch=""
  fi
  echo "$m $old_ver -> $ver"
  if vgt $old_ver $ver; then
    publish=1
    echo "$m: Newer version found, building."
    cd $builddir
    # Debian package
    makemoduledeb.pl --deb-depends --licence 'GPLv3' --email 'joe@virtualmin.com' --allow-overwrite --target-dir tmp $m
    # RPM package
    makemodulerpm.pl --rpm-depends --licence 'GPLv3' --allow-overwrite $epoch --rpm-dir $HOME/rpmbuild --target-dir tmp $m
    # wbm
    create-module.pl "tmp/$m-$ver.wbm.gz" "$m"
    # Copy into place
    cp tmp/*.deb $HOME/result/debian/dists/virtualmin-universal/main/binary-i386
    cp tmp/*.deb $HOME/result/debian/dists/virtualmin-universal/main/binary-amd64
    cp tmp/*.deb $HOME/result/gpl/debian/dists/virtualmin-universal/main/binary-i386
    cp tmp/*.deb $HOME/result/gpl/debian/dists/virtualmin-universal/main/binary-amd64
    aptly repo add virtualmin-universal tmp/*.deb
    aptly repo add virtualmin-gpl-universal tmp/*.deb
    aptly repo add virtualmin-7-pro tmp/*.deb
    aptly repo add virtualmin-7-gpl tmp/*.deb

    sign-with old tmp/*.rpm
    cp tmp/*.rpm $HOME/result/universal/
    cp tmp/*.rpm $HOME/result/gpl/universal/
    sign-with vm6 tmp/*.rpm
    cp tmp/*.rpm $HOME/result/vm/6/universal/
    cp tmp/*.rpm $HOME/result/vm/6/gpl/universal/
    sign-with vm7 tmp/*.rpm
    cp tmp/*.rpm $HOME/result/vm/7/pro/rpm/noarch/
    cp tmp/*.rpm $HOME/result/vm/7/gpl/rpm/noarch/

    cp tmp/*.wbm.gz $HOME/result/wbm
    cp tmp/*.wbm.gz $HOME/result/gpl/wbm
    cp tmp/*.wbm.gz $HOME/result/vm/6/wbm
    cp tmp/*.wbm.gz $HOME/result/vm/6/gpl/wbm
    cp tmp/*.wbm.gz $HOME/result/vm/7/wbm
    cp tmp/*.wbm.gz $HOME/result/vm/7/gpl/wbm

    # Cleanup
    rm -rf tmp/*
    rm -rf $m

    # Bump rev in lastvers
    echo "$ver" > "$HOME/build/lastvers/$m"
  fi
  echo "$m git version: $ver"
  echo "$m old version: $old_ver"
done

exit 0

if [ $publish -eq 1 ]; then
  updatevm7rpm.sh
  update-universal-apt
  publish-universal
  rsync-repos.sh
fi

